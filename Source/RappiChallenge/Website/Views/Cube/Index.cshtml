@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />

    <title>Cube Summation</title>

    <!-- Bootstrap -->
    <link href='@Url.Content("~/Content/css/bootstrap.min.css")' rel="stylesheet">

    <!-- Custom CSS -->
    <link href='@Url.Content("~/Content/css/1-col-portfolio.css")' rel="stylesheet">

    <style>
        canvas {
            width: 700px;
            height: 550px;
        }
    </style>
</head>
<body>

    <!-- Navigation -->
    <nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
        <div class="container">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <a class="navbar-brand" href="#">Cube Summation</a>
            </div>
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container -->
    </nav>

    <!-- Page Content -->
    <div class="container">

        <!-- Change Dimensions -->
        <div class="row">
            <div class="col-md-7">

                <form class="form-horizontal">
                    <div class="form-group">
                        <label class="control-label" for="txtDimensions">Dimensiones:</label>
                        <div>
                            <input type="text" class="form-control" id="txtDimensions" placeholder="Ingrese las dimensiones (N)">
                        </div>
                    </div>
                    <div class="form-group">
                        <div>
                            <input class="btn btn-default" type="button" id="btnChangeDimensions" value="Crear">
                        </div>
                    </div>
                </form>

            </div>
            <div class="col-md-5">
                <h4>Create</h4>
                <p>Este permite crear un nuevo cubo con las dimensiones ingresadas (N).</p>
            </div>
        </div>
        <!-- /.row -->

        <hr>

        <!-- Update -->
        <div class="row">
            <div class="col-md-7">

                <form class="form-inline">
                    <div class="form-group">
                        <label class="control-label" for="txtX">X:</label>
                        <div>
                            <input type="text" class="form-control" id="txtX" placeholder="Ingrese X">
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="txtY">Y:</label>
                        <div>
                            <input type="text" class="form-control" id="txtY" placeholder="Ingrese Y">
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="txtZ">Z:</label>
                        <div>
                            <input type="text" class="form-control" id="txtZ" placeholder="Ingrese Z">
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="txtValue">Valor:</label>
                        <div>
                            <input type="text" class="form-control" id="txtValue" placeholder="Ingrese el Valor">
                        </div>
                    </div>                    
                </form>

                <div class="form-group">
                    <div>
                        <input class="btn btn-default" type="button" id="btnUpdate" value="Actualizar">
                    </div>
                </div>

            </div>
            <div class="col-md-5">
                <h4>Update</h4>
                <p>
                    Este permite modificar el valor de una posición en específico.
                    <br />
                    Selecciona X Y Z e ingresa el valor.
                </p>
            </div>
        </div>
        <!-- /.row -->

        <hr>

        <!-- Project Two -->
        <div class="row">
            <div class="col-md-7">
               
                <form class="form-inline">
                    <div class="form-group">
                        <label class="control-label" for="txtX1">X1:</label>
                        <div>
                            <input type="text" class="form-control" id="txtX1" placeholder="Ingrese X1" value="1">
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="txtY1">Y1:</label>
                        <div>
                            <input type="text" class="form-control" id="txtY1" placeholder="Ingrese Y1" value="1">
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="txtZ1">Z1:</label>
                        <div>
                            <input type="text" class="form-control" id="txtZ1" placeholder="Ingrese Z1" value="1">
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label" for="txtX2">X2:</label>
                        <div>
                            <input type="text" class="form-control" id="txtX2" placeholder="Ingrese X2" value="2">
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="txtY2">Y2:</label>
                        <div>
                            <input type="text" class="form-control" id="txtY2" placeholder="Ingrese Y2" value="2">
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="txtZ2">Z2:</label>
                        <div>
                            <input type="text" class="form-control" id="txtZ2" placeholder="Ingrese Z2" value="2">
                        </div>
                    </div>
                    
                </form>

                <div class="form-group">
                    <div>
                        <input class="btn btn-default" type="button" id="btnSum" value="Sumar">
                    </div>
                </div>

            </div>
            <div class="col-md-5">
                <h4>Select</h4>
                <p>Permite calcular la suma de una región dada.</p>
            </div>
        </div>
        <!-- /.row -->

        <hr>

        <!-- Project Three -->
        <div class="row">
            <div class="col-md-7">
                <div class="canvas_container">
                    <canvas id="cube_canvas"></canvas>
                </div>
            </div>
            <div class="col-md-5">
                <h4>Cubo representativo</h4>
                <p>
                    Detalle de las accciones (Los errores muestran lo que devuelve la capa de "Negocio", esto para demostrar su comportamiento):
                </p>
                <div id="message" class="alert alert-success" style="visibility:hidden">
                    
                </div>
            </div>
        </div>
        <!-- /.row -->

        <hr>

        <!-- Footer -->
        <footer>
            <div class="row">
                <div class="col-lg-12">
                    <p>Copyright &copy; Mauricio Bedoya 2017</p>
                </div>
            </div>
            <!-- /.row -->
        </footer>

    </div>
    <!-- /.container -->

    <!-- JQuery -->
    <script src='@Url.Content("~/Scripts/jquery-3.1.1.min.js")'></script>

    <!-- Bootstrap Core JavaScript -->
    <script src='@Url.Content("~/Scripts/bootstrap.min.js")'></script>

    <!-- Three -->
    <script src='@Url.Content("~/Scripts/three.min.js")'></script>

    <script>

     <!-- Configuration -->
    var myCanvas = document.getElementById('cube_canvas');
    var width = 640;
    var height = 480;

    //Service Controller
    var controller = "Cube";

    //Cube
    var scene;
    var camera;
    var renderer;
    var geometry;

    var newDimensions;

    $(document).ready(function () {

        //CONTROLS EVENTS

        $("#btnChangeDimensions").on("click", function () {
            newDimensions = $("#txtDimensions").val();

            //Create Cube at Database
            ajaxPost("Create", { dimensions: newDimensions }, function (success, response) {
                if (success) {

                    showSuccessMessage("Has creado un nuevo Cubo con Dimensiones = " + newDimensions);
                    initCube(newDimensions);

                } else {
                    console.log(response);
                    showErrorMessage(response);
                }
            });
        });

        //Sum
        $("#btnSum").on("click", function () {

            //Get Values
            var x = $("#txtX1").val();
            var y = $("#txtY1").val();
            var z = $("#txtZ1").val();
            var point = { x: x, y: y, z: z};

            var x1 = $("#txtX2").val();
            var y1 = $("#txtY2").val();
            var z1 = $("#txtZ2").val();
            var point1 = { x: x1, y: y1, z: z1};

            initCube(newDimensions, point);

            //Get Cube values stored at Database
            ajaxPost("SumRegion", { x1: point.x, y1: point.y, z1: point.z, x2: point1.x, y2: point1.y, z2: point1.z }, function (success, response) {
                if (success) {

                    showSuccessMessage("La suma es: " + response.sum);

                    setTimeout(function () {
                        initCube(newDimensions);
                    }, 1000);

                } else {
                    showErrorMessage(response);
                }
            });
        });

        //Update
        $("#btnUpdate").on("click", function () {

            //Get Values
            var x = $("#txtX").val();
            var y = $("#txtY").val();
            var z = $("#txtZ").val();
            var value = $("#txtValue").val();
            var point = { x: x, y: y, z: z, value: value };

            initCube(newDimensions, point);

            //Get Cube values stored at Database
            ajaxPost("UpdatePoint", point, function (success, response) {
                if (success) {
                    
                    showSuccessMessage("Se ha actualizado el valor (" + point.value + ") para " + point.x + "," + point.y + "," + point.z);
                    setTimeout(function () {
                        initCube(newDimensions);
                    }, 1000);

                } else {
                    showErrorMessage(response);
                }
            });
        });

        //GENERAL METHODS

        function showSuccessMessage(message) {
            $("#message").addClass("alert-success");
            $("#message").removeClass("alert-danger");
            $("#message").css("visibility", "visible");
            $("#message").html(message);
        }

        function showErrorMessage(message) {

            var errorMessage = message;
            if (typeof message.responseText !== "undefined") {
                //Array[1]: title
                message = $.parseHTML(message.responseText)[1].innerHTML;
            }

            $("#message").addClass("alert-danger");
            $("#message").removeClass("alert-success");
            $("#message").css("visibility", "visible");
            $("#message").html(message);
        }

        function ajaxPost(method, data, fx) {

            $.ajax({
                url: "/" + controller + "/" + method,
                dataType: "json",
                type: "POST",
                data: data,
                success: function (data) {
                    fx(true, data);
                },
                error: function (a, b, c) {
                    fx(false, a);
                }
            });
        }

        function init() {

            //Get Cube Dimensions
            ajaxPost("GetDimensions", {}, function (success, response) {

                if (success) {

                    console.log("Dimensions: " + response);
                    newDimensions = response;

                    showSuccessMessage("Se ha cargado un Cubo de la base de datos con Dimensiones = " + newDimensions);
                    initCube(newDimensions);

                    //Get Cube values stored at Database
                    ajaxPost("GetValues", {}, function (success, response) {

                        if (success) {

                            console.log(response);

                        } else {
                            showErrorMessage(response);
                        }
                    });
                } else {

                    showErrorMessage(response);
                }
            });

        }

        function initCube(dimensions, rowToHighlight) {

            var scene = new THREE.Scene();
            var camera = new THREE.PerspectiveCamera(80, width / height, 1, 10000);
            var renderer = new THREE.WebGLRenderer({ canvas: myCanvas });
            renderer.setSize(width, height);
            renderer.setClearColor(0xffffff);

            var geometry = new THREE.BoxGeometry(700, 700, 700, dimensions, dimensions, dimensions);
            console.log(geometry.faces.length);

            var hexArray = new Array(0x2e4045, 0x83adb5, 0x83fdb5);
            var j = 1;

            console.log(rowToHighlight);
            console.log(typeof rowToHighlight !== "undefined");

            for (var i = 0; i < geometry.faces.length; i += 2) {

                //Display green cell when updated
                if (typeof rowToHighlight !== "undefined" && 
                    (( rowToHighlight.x == j) || (rowToHighlight.y == 1 && (newDimensions * 10 - newDimensions * rowToHighlight.x == j)))
                    ){
                    geometry.faces[i].color.setHex(0x098967);
                    geometry.faces[i + 1].color.setHex(0x098967);
                } else {
                    if (newDimensions % 2 != 0) {
                        geometry.faces[i].color.setHex(hexArray[j % 2]);
                        geometry.faces[i + 1].color.setHex(hexArray[j % 2]);
                    } else {
                        geometry.faces[i].color.setHex(hexArray[j % 3]);
                        geometry.faces[i + 1].color.setHex(hexArray[j % 3]);
                    }
                }
                j++;
            }

            var material = new THREE.MeshBasicMaterial({ vertexColors: THREE.FaceColors, overdraw: 0.5 });
            cube = new THREE.Mesh(geometry, material);
            scene.add(cube);

            camera.position.z = 1000;
            var rotated = false;
            function render() {
                requestAnimationFrame(render);
                if (!rotated) {
                    rotated = true;
                    cube.rotation.x += 0.5;
                    cube.rotation.y += 180;
                    cube.rotation.z -= 0;
                }
                renderer.render(scene, camera);
            };
            render();
        }

        //Initialize data - it is retrieved from Database (Controller Service -> Database)
        init();

    });
    </script>

</body>
</html>
